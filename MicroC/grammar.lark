
// Gramática inicial para MicroC (exemplo simplificado)

?start:         program

program:        (declaration)*

?declaration:   var_decl 
                | fun_decl

var_decl:       type ID ";"
fun_decl:       type ID "(" params ")" block

params:         (param ("," param)*)?
param:          type ID

type:           "int" | "void"

block:          "{" statement* "}"
?statement:      expr_stmt 
                | block
                | if_stmt 
                | while_stmt 
                | return_stmt

expr_stmt:      expression ";"
if_stmt:        "if" "(" expression ")" statement ("else" statement)?
while_stmt:     "while" "(" expression ")" statement
return_stmt:    "return" expression? ";"

?expression:     assignment
?assignment:     ID "=" assignment | logic_or
?logic_or:       logic_and ("||" logic_and)*
?logic_and:      equality ("&&" equality)*
?equality:       relational (("==" | "!=" ) relational)*
?relational:     sum (("<" | ">" | "<=" | ">=") sum)*
?sum:            term (("+" | "-") term)*
?term:           factor (("*" | "/") factor)*
?factor:          INT 
                 | ID 
                 | ID "(" [args] ")"      // <- chamada de função
                 | "(" expression ")"

args: expression ("," expression)*

ID: /[a-zA-Z_][a-zA-Z0-9_]*/
INT: /[0-9]+/

%import common.WS
%ignore WS
